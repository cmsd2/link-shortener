# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: notes # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  environment:
    TABLE_NAME: "${env:${self:provider.stage}_TABLE_NAME}"

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${env:${self:provider.stage}_TABLE_NAME}"

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-stage-variables
  - serverless-s3bucket-sync

custom:
  s3-sync:
    - folder: wwwroot
      bucket: "${env:${self:provider.stage}_SITE_BUCKET}"

functions:
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer:
            arn: ${env:${self:provider.stage}_COGNITO_USER_POOL_ARN}
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer:
            arn: ${env:${self:provider.stage}_COGNITO_USER_POOL_ARN}
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer:
            arn: ${env:${self:provider.stage}_COGNITO_USER_POOL_ARN}
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer:
            arn: ${env:${self:provider.stage}_COGNITO_USER_POOL_ARN}
  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer:
            arn: ${env:${self:provider.stage}_COGNITO_USER_POOL_ARN}

#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ApiIpv4RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - ApiCloudFront
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneId: "${env:${self:provider.stage}_ZONE_ID}"
        Name: "${env:${self:provider.stage}_API_DOMAIN}"
        Type: A
    ApiIpv6RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - ApiCloudFront
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneId: "${env:${self:provider.stage}_ZONE_ID}"
        Name: "${env:${self:provider.stage}_API_DOMAIN}"
        Type: AAAA
    SiteIpv4RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFront
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneId: "${env:${self:provider.stage}_ZONE_ID}"
        Name: "${env:${self:provider.stage}_DOMAIN}"
        Type: A
    SiteIpv6RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFront
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneId: "${env:${self:provider.stage}_ZONE_ID}"
        Name: "${env:${self:provider.stage}_DOMAIN}"
        Type: AAAA
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: true
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        SSESpecification:
          SSEEnabled: true
        TableName: "${env:${self:provider.stage}_TABLE_NAME}"
        Tags:
          - Key: Application
            Value: notes
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: BucketOwnerFullControl
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        BucketName: om-notes-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Authorization
              AllowedMethods:
                - GET
                - PUT
                - HEAD
                - POST
              AllowedOrigins:
                - "*"
              MaxAge: 600
        LifecycleConfiguration:
          Rules:
            - Id: "Abort Incomplete Multipart Uploads"
              Status: Enabled
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 1
        LoggingConfiguration: 
          DestinationBucketName: "${env:LOGS_BUCKET}"
          LogFilePrefix: "om-notes-uploads/${self:provider.stage}/"
        Tags:
          - Key: Application
            Value: notes
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - "${env:${self:provider.stage}_DOMAIN}"
          CustomErrorResponses:
            - ErrorCachingMinTTL: 60
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            Compress: true
            DefaultTTL: 300
            ForwardedValues:
              QueryString: false
            TargetOriginId: S3
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          IPV6Enabled: true
          Logging:
            Bucket: "${env:LOGS_BUCKET}.s3.amazonaws.com"
            Prefix: "om-notes-site/${self:provider.stage}"
          Origins:
            - Id: "S3"
              DomainName:
                Fn::GetAtt:
                  - SiteBucket
                  - DomainName
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - "/"
                    -
                      - origin-access-identity
                      - cloudfront
                      - Ref:
                          OriginAccessIdentity
          PriceClass: PriceClass_100
          Restrictions:
            GeoRestriction:
              RestrictionType: none
          ViewerCertificate:
            AcmCertificateArn: "${env:${self:provider.stage}_ACM_ARN}"
            SslSupportMethod: sni-only
          # WebACLId:
        Tags:
          - Key: Application
            Value: notes
    ApiCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - "${env:${self:provider.stage}_API_DOMAIN}"
          DefaultCacheBehavior:
            AllowedMethods:
              - "DELETE"
              - "GET"
              - "HEAD"
              - "OPTIONS"
              - "PATCH"
              - "POST"
              - "PUT"
            CachedMethods:
              - "HEAD"
              - "GET"
            Compress: false
            DefaultTTL: 3600
            ForwardedValues:
              Headers:
                - Authorization
              QueryString: true
              QueryStringCacheKeys:
                - "q"
            MinTTL: 60
            TargetOriginId: Api
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          IPV6Enabled: true
          Logging:
            Bucket: "${env:LOGS_BUCKET}.s3.amazonaws.com"
            Prefix: "om-notes-api/${self:provider.stage}"
          Origins:
            - Id: Api
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
              DomainName:
                Fn::Join:
                  - ""
                  -
                    - Ref:
                        ApiGatewayRestApi
                    - ".execute-api.${self:provider.region}.amazonaws.com"
              OriginPath: "/${self:provider.stage}"
          PriceClass: PriceClass_100
          Restrictions:
            GeoRestriction:
              RestrictionType: none
          ViewerCertificate:
            AcmCertificateArn: "${env:${self:provider.stage}_ACM_ARN}"
            SslSupportMethod: sni-only
          # WebACLId:
        Tags:
          - Key: Application
            Value: notes
    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "om-notes-${self:provider.stage} origin access identity"
    SiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: BucketOwnerFullControl
        BucketName: "${env:${self:provider.stage}_SITE_BUCKET}"
        LifecycleConfiguration:
          Rules:
            - Id: "Remove old versions"
              Status: Enabled
              NoncurrentVersionExpirationInDays: 30
        LoggingConfiguration:
          DestinationBucketName: "${env:LOGS_BUCKET}"
          LogFilePrefix: "om-notes-site-s3/${self:provider.stage}/"
        MetricsConfigurations:
          - Id: metrics
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Authorization
                - Content-Length
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 600
    SiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SiteBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                    - OriginAccessIdentity
                    - S3CanonicalUserId
              Action:
                - "s3:GetObject"
              Resource:
                - Fn::Join:
                  - "/"
                  -
                    - Fn::GetAtt:
                      - SiteBucket
                      - Arn
                    - "*"
              
  Outputs:
    Table:
      Description: "Name of the notes DynamoDB table"
      Value:
        Ref: NotesTable
    UploadsBucket:
      Description: "Name of uploads bucket"
      Value:
        Ref: UploadsBucket
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
